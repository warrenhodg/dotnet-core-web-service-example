//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dotnet_core_wsdl
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://services.aonaware.com/webservices/", ConfigurationName="dotnet_core_wsdl.DictServiceSoap")]
    public interface DictServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/ServerInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ServerInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/DictionaryList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<dotnet_core_wsdl.Dictionary[]> DictionaryListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/DictionaryListExtended", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<dotnet_core_wsdl.Dictionary[]> DictionaryListExtendedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/DictionaryInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> DictionaryInfoAsync(string dictId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/Define", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<dotnet_core_wsdl.WordDefinition> DefineAsync(string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/DefineInDict", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<dotnet_core_wsdl.WordDefinition> DefineInDictAsync(string dictId, string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/StrategyList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<dotnet_core_wsdl.Strategy[]> StrategyListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/Match", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<dotnet_core_wsdl.DictionaryWord[]> MatchAsync(string word, string strategy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://services.aonaware.com/webservices/MatchInDict", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<dotnet_core_wsdl.DictionaryWord[]> MatchInDictAsync(string dictId, string word, string strategy);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Dictionary
    {
        
        private string idField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class DictionaryWord
    {
        
        private string dictionaryIdField;
        
        private string wordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string DictionaryId
        {
            get
            {
                return this.dictionaryIdField;
            }
            set
            {
                this.dictionaryIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Word
        {
            get
            {
                return this.wordField;
            }
            set
            {
                this.wordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Strategy
    {
        
        private string idField;
        
        private string descriptionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class Definition
    {
        
        private string wordField;
        
        private Dictionary dictionaryField;
        
        private string wordDefinitionField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Word
        {
            get
            {
                return this.wordField;
            }
            set
            {
                this.wordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Dictionary Dictionary
        {
            get
            {
                return this.dictionaryField;
            }
            set
            {
                this.dictionaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string WordDefinition
        {
            get
            {
                return this.wordDefinitionField;
            }
            set
            {
                this.wordDefinitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://services.aonaware.com/webservices/")]
    public partial class WordDefinition
    {
        
        private string wordField;
        
        private Definition[] definitionsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Word
        {
            get
            {
                return this.wordField;
            }
            set
            {
                this.wordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        public Definition[] Definitions
        {
            get
            {
                return this.definitionsField;
            }
            set
            {
                this.definitionsField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
    public interface DictServiceSoapChannel : dotnet_core_wsdl.DictServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.4")]
    public partial class DictServiceSoapClient : System.ServiceModel.ClientBase<dotnet_core_wsdl.DictServiceSoap>, dotnet_core_wsdl.DictServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DictServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(DictServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), DictServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DictServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DictServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DictServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DictServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DictServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> ServerInfoAsync()
        {
            return base.Channel.ServerInfoAsync();
        }
        
        public System.Threading.Tasks.Task<dotnet_core_wsdl.Dictionary[]> DictionaryListAsync()
        {
            return base.Channel.DictionaryListAsync();
        }
        
        public System.Threading.Tasks.Task<dotnet_core_wsdl.Dictionary[]> DictionaryListExtendedAsync()
        {
            return base.Channel.DictionaryListExtendedAsync();
        }
        
        public System.Threading.Tasks.Task<string> DictionaryInfoAsync(string dictId)
        {
            return base.Channel.DictionaryInfoAsync(dictId);
        }
        
        public System.Threading.Tasks.Task<dotnet_core_wsdl.WordDefinition> DefineAsync(string word)
        {
            return base.Channel.DefineAsync(word);
        }
        
        public System.Threading.Tasks.Task<dotnet_core_wsdl.WordDefinition> DefineInDictAsync(string dictId, string word)
        {
            return base.Channel.DefineInDictAsync(dictId, word);
        }
        
        public System.Threading.Tasks.Task<dotnet_core_wsdl.Strategy[]> StrategyListAsync()
        {
            return base.Channel.StrategyListAsync();
        }
        
        public System.Threading.Tasks.Task<dotnet_core_wsdl.DictionaryWord[]> MatchAsync(string word, string strategy)
        {
            return base.Channel.MatchAsync(word, strategy);
        }
        
        public System.Threading.Tasks.Task<dotnet_core_wsdl.DictionaryWord[]> MatchInDictAsync(string dictId, string word, string strategy)
        {
            return base.Channel.MatchInDictAsync(dictId, word, strategy);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DictServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.DictServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DictServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://services.aonaware.com/DictService/DictService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.DictServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://services.aonaware.com/DictService/DictService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            DictServiceSoap,
            
            DictServiceSoap12,
        }
    }
}
